@startuml
start
:chann, x = batch;
:chann = chann.permute(0,3,1,2);
if (not predict) then (yes)
    :SNR_db = 40;
endif
:Get Y with Conj;
:chann = build Complex(channel1,channel2);
:chann_abs = chann.abs();
:max absolute normalize;
:z-score filter;
if (valid_data.numel() != 0) then (yes)

    :Normalize X
    :Normalize Y
    :m, a = self(magnitud, angle);
    :a = (a*torch.pi*2)-torch.pi;
    :ang_real = torch.cos(a+Y.angle());
    :ang_imag = torch.sin(a+Y.angle());
    :target_angle = torch.polar(torch.ones(x.shape).to(torch.float64).to(self.device), torch.angle(x));
    :loss = .5*self.loss_f(m*Y.abs(), x.abs()) + 
    .25*self.loss_f(target_angle.real, ang_real) + .25*self.loss_f(target_angle.imag, ang_imag);
endif
stop
@enduml
